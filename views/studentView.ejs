<!DOCTYPE html>
<html lang="zxx" class="js">
<meta http-equiv="content-type" content="text/html;charset=UTF-8" />

<head>
    <meta charset="utf-8">
    <meta name="author" content="Softnio">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description"
        content="A powerful and conceptual apps base dashboard template that especially build for developers and programmers.">
    <link rel="shortcut icon" href="/images/coat.png">
    <title>SchoolMS</title>
    <link rel="stylesheet" href="/assets/css/dashlitee1e3.css?ver=3.2.4">
    <link id="skin-default" rel="stylesheet" href="/assets/css/themee1e3.css?ver=3.2.4">
    <link rel="stylesheet" href="/assets/css/style1.css">
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-91615293-4"></script>
    <script>window.dataLayer = window.dataLayer || []; function gtag() { dataLayer.push(arguments); } gtag('js', new Date()); gtag('config', 'UA-91615293-4');</script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        /* Simple styling for modal form inputs inside SweetAlert */
        .swal2-html-container form label {
            display: block;
            margin-top: 8px;
            font-weight: 600;
        }

        .swal2-html-container form input,
        .swal2-html-container form select {
            width: 100%;
            padding: 6px 8px;
            margin-top: 4px;
            box-sizing: border-box;
        }

        #dataTable {
            width: 100%;
            border-collapse: collapse;
        }

        #dataTable th,
        #dataTable td {
            border: 1px solid #ddd;
            padding: 8px;
            vertical-align: middle;
        }

        #dataTable th {
            background-color: #f2f2f2;
            font-weight: 700;
        }

        .action-btn {
            margin-right: 6px;
            padding: 4px 8px;
            cursor: pointer;
            border: none;
            border-radius: 3px;
            color: white;
        }

        #addBtn {
            margin: 12px 0;
        }

        .no-data-row td {
            text-align: center;
            font-style: italic;
            color: #888;
        }
        .nk-sidebar {
            background-color: #035994 !important;
            color: white !important;
        }
    </style>
</head>

<body class="nk-body bg-lighter npc-general has-sidebar ">
    <div class="nk-app-root">
        <div class="nk-main ">
            <%-include('sidebar.ejs')-%>
                <div class="nk-wrap ">
                    <%-include('header.ejs')-%>
                        <div class="nk-content ">
                            <div class="container-fluid">
                                <div class="nk-content-inner">
                                    <div class="nk-content-body">
                                        <div class="nk-block-head nk-block-head-sm">
                                            <div class="nk-block-between">
                                                <div class="nk-block-head-content">
                                                    <h3 class="nk-block-title page-title">Enroll Students</h3>
                                                    <P>Welcome to SMS</P>
                                                </div>
                                            </div>
                                            </div>
                                            <div id="parentSelectorContainer"></div>
                                            <div id="dataContent">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1100;"></div>
                        <%-include('footer.ejs')%>
                </div>
        </div>
    </div>

    <%-include('right-side.ejs')%>

        <script src="/assets/js/bundlee1e3.js?ver=3.2.4"></script>
        <script src="/assets/js/scriptse1e3.js?ver=3.2.4"></script>
        <script src="/assets/js/demo-settingse1e3.js?ver=3.2.4"></script>
        <script src="/assets/js/charts/gd-defaulte1e3.js?ver=3.2.4"></script>
        <!-- DataTables core -->
        <link rel="stylesheet" href="assets/css/libs/datatable.css">
        <script src="assets/js/libs/datatable.js"></script>

        <!-- DataTables Buttons extension -->
        <link rel="stylesheet" href="assets/css/libs/datatable-btns.css">
        <script src="assets/js/libs/datatable-btnse1e3.js"></script>


        <script>
            $(document).ready(function () {
                const currentPath = window.location.pathname;
                console.log("Current Path:", currentPath);

                $(".nk-menu-link").each(function () {
                    const linkPath = new URL(this.href).pathname;
                    console.log("Link Path:", linkPath);
                    if (linkPath === currentPath) {
                        $(this).addClass("active");
                    } else {
                        $(this).removeClass("active");
                    }
                });
            });

            window.addEventListener('pageshow', function (event) {
                if (event.persisted || (window.performance && window.performance.navigation.type === 2)) {

                    window.location.reload();
                }
            });

            $(document).ready(function () {
                $('#logout-link').on('click', function (e) {
                    e.preventDefault();

                    console.log('reached')
                    $.ajax({
                        type: 'POST',
                        url: '/api/logout',
                        contentType: 'application/json',
                        success: function (response) {
                            showToast("Success", "Logged out in successfully", "text-success");
                            window.location.href = '/'
                        },
                        error: function (xhr) {
                            let message = "Request failed. Please try again.";
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                message = xhr.responseJSON.message;
                            }
                            showToast("Error", message, "text-danger");
                            return;
                        },
                    });
                })

                function showToast(title, body, titleClass) {
                    const toastHtml = `
                <div class="toast align-items-center text-bg-light border-0" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="5000">
                    <div class="toast-header">
                        <strong class="me-auto ${titleClass}">${title}</strong>
                        <small class="text-muted">Now</small>
                        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">${body}</div>
                </div>`;

                    const $toast = $(toastHtml);
                    $('.toast-container').append($toast);
                    const toast = new bootstrap.Toast($toast[0]);
                    toast.show();
                }
            })

            $(document).ready(function () {
                let currentEntity = '';
                let currentColumns = [];
                let parentDataCache = {};
                let loadedData = [];
                let parentSelections = {};

                // Pagination variables
                let currentPage = 1;
                const rowsPerPage = 2;

                const entityConfig = {
                    year: { parentField: null, api: '/year', fields: ['name', 'start_date', 'end_date', 'is_active'] },
                    class: { parentField: 'year_id', api: '/class', parentEntity: 'year', fields: ['name', 'capacity', 'year_id'] },
                    stream: { parentField: 'class_id', api: '/stream', parentEntity: 'class', fields: ['name', 'capacity', 'class_id'] },
                    student: { parentField: 'stream_id', api: '/student', parentEntity: 'stream', fields: ['first_name', 'middle_name', 'last_name', 'birth_date', 'gender', 'stream_id'], enums: { gender: ['Male', 'Female'] } },
                    subject: { parentField: 'class_id', api: '/subject', parentEntity: 'class', fields: ['name', 'code', 'is_optional', 'class_id'], enums: { is_optional: ['TRUE', 'FALSE'] } },
                    term: { parentField: 'year_id', api: '/term', parentEntity: 'year', fields: ['name', 'start_date', 'end_date', 'year_id'] },
                    assessment: { parentField: 'term_id', api: '/assessment', parentEntity: 'term', fields: ['name', 'term_id'] },
                    examination: { parentField: 'assessment_id', api: '/examination', parentEntity: 'assessment', fields: ['name', 'start_date', 'end_date', 'assessment_id'] }
                };

                function escapeHtml(text) {
                    if (typeof text !== 'string') return text;
                    return text.replace(/[&<>"'`=\/]/g, function (s) {
                        return ({
                            '&': '&amp;',
                            '<': '&lt;',
                            '>': '&gt;',
                            '"': '&quot;',
                            "'": '&#39;',
                            '`': '&#96;',
                            '=': '&#61;',
                            '/': '&#47;'
                        })[s];
                    });
                }

                function detectInputType(fieldName, value) {
                    const lowerName = fieldName.toLowerCase();
                    if (lowerName.includes('date')) return 'date';
                    if (lowerName.includes('id') && lowerName !== 'id') return 'number';
                    if (lowerName.includes('number') || lowerName.includes('capacity')) return 'number';
                    return 'text';
                }

                function prettifyColumnName(colName) {
                    return colName.replace(/_/g, ' ').replace(/\b\w/g, c => c.toUpperCase());
                }

                function fetchParentData(parentEntity) {
                    if (!parentEntity || parentDataCache[parentEntity]) {
                        return $.Deferred().resolve();
                    }

                    const api = entityConfig[parentEntity]?.api;
                    if (!api) {
                        return $.Deferred().resolve();
                    }

                    return $.ajax({
                        url: api,
                        method: 'GET',
                        success: function (res) {
                            let data = res.data ? res.data : res;
                            parentDataCache[parentEntity] = data;
                        }
                    });
                }

                function buildFormFields(data = {}) {
                    let formHtml = '';
                    const config = entityConfig[currentEntity];
                    const parentField = config?.parentField;
                    const parentEntity = config?.parentEntity;
                    const columns = config.fields;

                    columns.forEach(col => {
                        if (col === parentField) {
                            const selectedParentId = Object.values(parentSelections).pop();
                            formHtml += buildParentSelect(parentEntity, selectedParentId, true);
                            return;
                        }

                        const val = data[col] !== undefined && data[col] !== null ? data[col] : '';

                        if (config.enums && config.enums[col]) {
                            let optionsHtml = `<option value="">-- Select ${prettifyColumnName(col)} --</option>`;
                            config.enums[col].forEach(option => {
                                let selected = val === option ? 'selected' : '';
                                optionsHtml += `<option value="${option}" ${selected}>${escapeHtml(option)}</option>`;
                            });
                            formHtml += `
                            <div class="form-group mb-2">
                                <label for="field_${col}">${prettifyColumnName(col)}</label>
                                <select id="field_${col}" name="${col}" class="form-control" required>
                                    ${optionsHtml}
                                </select>
                            </div>
                        `;
                            return;
                        }

                        const inputType = detectInputType(col, val);
                        const escapedVal = escapeHtml(val);

                        if (inputType === 'date' && val) {
                            let d = new Date(val);
                            if (!isNaN(d)) {
                                let yyyy = d.getFullYear();
                                let mm = String(d.getMonth() + 1).padStart(2, '0');
                                let dd = String(d.getDate()).padStart(2, '0');
                                formHtml += `
                                <div class="form-group mb-2">
                                    <label for="field_${col}">${prettifyColumnName(col)}</label>
                                    <input type="date" id="field_${col}" name="${col}" value="${yyyy}-${mm}-${dd}" class="form-control" />
                                </div>
                            `;
                                return;
                            }
                        }

                        formHtml += `
                        <div class="form-group mb-2">
                            <label for="field_${col}">${prettifyColumnName(col)}</label>
                            <input type="${inputType}" id="field_${col}" name="${col}" value="${escapedVal}" class="form-control" />
                        </div>
                    `;
                    });

                    return formHtml;
                }

                function buildParentSelect(parentEntity, selectedValue, isDisabled) {
                    const parentList = parentDataCache[parentEntity] || [];
                    const parentField = entityConfig[currentEntity].parentField;
                    const disabledAttr = isDisabled ? 'disabled' : '';

                    let optionsHtml = `<option value="">-- Select ${prettifyColumnName(parentEntity)} --</option>`;

                    parentList.forEach(item => {
                        let id = item.id;
                        let name = item.name || `ID:${id}`;
                        let selected = selectedValue == id ? 'selected' : '';
                        optionsHtml += `<option value="${id}" ${selected}>${escapeHtml(name)}</option>`;
                    });

                    const hiddenInput = isDisabled ? `<input type="hidden" name="${parentField}" value="${selectedValue}">` : '';

                    return `
                    <div class="form-group mb-2">
                        <label for="field_${parentField}">${prettifyColumnName(parentField)}</label>
                        <select id="field_${parentField}" name="${parentField}" class="form-control" ${disabledAttr} required>
                            ${optionsHtml}
                        </select>
                        ${hiddenInput}
                    </div>
                `;
                }

                function renderTable(data) {
                    const totalPages = Math.ceil(data.length / rowsPerPage);
                    if (currentPage > totalPages) currentPage = totalPages;
                    if (currentPage < 1) currentPage = 1;

                    const startIndex = (currentPage - 1) * rowsPerPage;
                    const endIndex = startIndex + rowsPerPage;
                    const paginatedData = data.slice(startIndex, endIndex);

                    let headerHtml = '<tr>';
                    headerHtml += `<th>S/N</th>`;
                    currentColumns.forEach(col => {
                        if (col.toLowerCase().includes('id')) return;
                        headerHtml += `<th>${prettifyColumnName(col)}</th>`;
                    });
                    headerHtml += '<th>Actions</th></tr>';
                    $('#dataTable thead').html(headerHtml);

                    let rowsHtml = '';
                    if (paginatedData.length > 0) {
                        paginatedData.forEach((row, index) => {
                            rowsHtml += '<tr>';
                            rowsHtml += `<td>${startIndex + index + 1}</td>`;
                            currentColumns.forEach(col => {
                                if (col.toLowerCase().includes('id')) return;
                                let val = row[col];
                                if (val === null || val === undefined) val = '';
                                rowsHtml += `<td>${escapeHtml(val)}</td>`;
                            });
                            let idVal = row.id;
                            rowsHtml += `
                                <td>
                                    <ul class="nk-tb-actions gx-1">
                                        <li>
                                            <div class="drodown dropstart">
                                                <a href="#" class="dropdown-toggle btn btn-icon btn-trigger" data-bs-toggle="dropdown">
                                                    <em class="icon ni ni-more-h"></em>
                                                </a>
                                                <div class="dropdown-menu dropdown-menu-end">
                                                    <ul class="link-list-opt no-bdr">
                                                        <li>
                                                            <a href="#" class="edit-btn" data-id="${idVal}" data-row='${JSON.stringify(row)}'>
                                                                <em class="icon ni ni-eye"></em><span>Edit Details</span>
                                                            </a>
                                                        </li>
                                                        <li>
                                                            <a href="#" class="delete-btn" data-id="${idVal}">
                                                                <em class="icon ni ni-na"></em><span>Delete</span>
                                                            </a>
                                                        </li>
                                                    </ul>
                                                </div>
                                            </div>
                                        </li>
                                    </ul>
                                </td>
                            </tr>
                            `;
                        });
                        $('#dataTable tbody').html(rowsHtml);
                    } else {
                        const numCols = currentColumns.length + 2;
                        rowsHtml = `<tr><td colspan="${numCols}" class="text-center">No data available</td></tr>`;
                        $('#dataTable tbody').html(rowsHtml);
                    }

                    let paginationHtml = `<nav aria-label="Page navigation"><ul class="pagination justify-content-end">`;
                    paginationHtml += `<li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                        <button class="page-link page-btn" data-page="${currentPage - 1}">Prev</button>
                        </li>`;
                                    for (let i = 1; i <= totalPages; i++) {
                                        paginationHtml += `<li class="page-item ${i === currentPage ? 'active' : ''}">
                                <button class="page-link page-btn" data-page="${i}">${i}</button>
                            </li>`;
                                    }
                                    paginationHtml += `<li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                            <button class="page-link page-btn" data-page="${currentPage + 1}">Next</button>
                        </li>`;
                    paginationHtml += `</ul></nav>`;
                    $('#pagination').html(paginationHtml);
                }

                function openModal(title, rowData = {}) {
                    const isEdit = !!rowData.id;
                    const config = entityConfig[currentEntity];
                    const parentField = config?.parentField;
                    const lastParentId = Object.values(parentSelections).pop();

                    if (!isEdit && parentField && lastParentId) {
                        rowData[parentField] = lastParentId;
                    }

                    Swal.fire({
                        title,
                        html: `<form id="crudForm">${buildFormFields(rowData)}</form>`,
                        focusConfirm: false,
                        showCancelButton: true,
                        confirmButtonText: isEdit ? 'Update' : 'Create',
                        preConfirm: () => {
                            const formData = {};
                            $('#crudForm').serializeArray().forEach(({ name, value }) => {
                                formData[name] = value;
                            });
                            if (isEdit && rowData.id) {
                                formData.id = rowData.id;
                            }
                            return formData;
                        }
                    }).then(result => {
                        if (result.isConfirmed) {
                            Swal.fire({
                                title: isEdit ? 'Updating...' : 'Creating...',
                                allowOutsideClick: false,
                                didOpen: () => Swal.showLoading()
                            });

                            const data = result.value;
                            const method = isEdit ? 'PUT' : 'POST';
                            const url = isEdit ? `${entityConfig[currentEntity].api}/${data.id}` : entityConfig[currentEntity].api;

                            $.ajax({
                                url,
                                method,
                                data: data,
                                success: () => {
                                    Swal.close();
                                    Swal.fire('Success', `${title} successful!`, 'success');
                                    const lastParentId = Object.values(parentSelections).pop();
                                    fetchChildData(currentEntity, lastParentId);
                                },
                                error: (xhr) => {
                                    Swal.close();
                                    let errMsg = xhr.responseJSON?.error || 'Operation failed';
                                    Swal.fire('Error', errMsg, 'error');
                                }
                            });
                        }
                    });
                }

                function fetchChildData(entity, parentId = null) {
                    Swal.fire({
                        title: `Loading ${entity} data...`,
                        allowOutsideClick: false,
                        didOpen: () => Swal.showLoading()
                    });

                    const config = entityConfig[entity];
                    let apiUrl = config.api;

                    if (parentId) {
                        // Use the parent entity name in the path, not as a query string
                        const parentEntity = config.parentEntity;
                        apiUrl = `${apiUrl}/${parentEntity}/${parentId}`;
                    }

                    $.ajax({
                        url: apiUrl,
                        method: 'GET',
                        success: function (response) {
                            Swal.close();
                            loadedData = response.data ? response.data : response || [];

                            const tableHtml = `
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <h2>${prettifyColumnName(entity)}</h2>
                                    <button class="btn btn-primary" id="addBtn">Add New ${prettifyColumnName(entity)}</button>
                                </div>
                                <div class="input-group mb-3">
                                    <input type="text" class="form-control" id="tableSearch" placeholder="Search...">
                                </div>
                                 <table class="datatable-init-export nowrap table table-bordered table-striped" 
                                    id="dataTable"
                                    data-export-title="${prettifyColumnName(entity)}">
                                    <thead></thead>
                                    <tbody></tbody>
                                </table>
                                <div id="pagination" class="d-flex justify-content-end"></div>
                            `;
                            $('#dataContent').html(tableHtml);

                            if (loadedData.length > 0) {
                                currentColumns = Object.keys(loadedData[0]);
                            } else {
                                currentColumns = config.fields;
                            }
                            renderTable(loadedData);
                             if ($.fn.DataTable) {
                                $('.datatable-init-export').DataTable().destroy();
                                $('.datatable-init-export').DataTable({
                                    dom: 'Bfrtip',
                                    buttons: ['copy', 'csv', 'excel', 'pdf', 'print'],
                                    paging: false,           // Enable pagination
                                    searching: false,        // Enable search bar
                                    responsive: true
                                });
                            }
                        },
                        error: function (xhr) {
                            Swal.close();

                            if (xhr.status === 404) {
                                // Treat as "no data" instead of showing error
                                loadedData = [];
                                currentColumns = entityConfig[entity].fields; // fallback columns
                                const tableHtml = `
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h2>${prettifyColumnName(entity)}</h2>
                                        <button class="btn btn-primary" id="addBtn">Add New ${prettifyColumnName(entity)}</button>
                                    </div>
                                    <div class="input-group mb-3">
                                        <input type="text" class="form-control" id="tableSearch" placeholder="Search...">
                                    </div>
                                    <table class="table table-bordered table-striped" id="dataTable">
                                        <thead></thead>
                                        <tbody></tbody>
                                    </table>
                                    <div id="pagination" class="d-flex justify-content-end"></div>
                                `;
                                $('#dataContent').html(tableHtml);
                                renderTable([]); // will show "No data available"
                            } else {
                                Swal.fire('Error', 'Failed to load data. Please try again.', 'error');
                            }
                        }
                    });
                }

                function handleParentChange(element, index, selectors) {
                    const pEntity = $(element).data('entity');
                    const selectedId = $(element).val();
                    parentSelections[pEntity] = selectedId;

                    // Clear and disable subsequent dropdowns AND the main data table
                    $('.parent-select').each(function (j) {
                        if (j > index) {
                            $(this).val('').prop('disabled', true).html('<option value="">-- Select --</option>');
                            parentSelections[$(this).data('entity')] = null;
                        }
                    });
                    $('#dataContent').html('');

                    if (selectedId) {
                        if (index + 1 < selectors.length) {
                            const nextEntity = selectors[index + 1];
                            const nextParentField = entityConfig[nextEntity].parentField;
                            const filteredData = parentDataCache[nextEntity]?.filter(item => item[nextParentField] == selectedId) || [];

                            let optionsHtml = `<option value="">-- Select ${prettifyColumnName(nextEntity)} --</option>`;
                            filteredData.forEach(item => {
                                optionsHtml += `<option value="${item.id}">${escapeHtml(item.name || `ID:${item.id}`)}</option>`;
                            });
                            $(`#select-${nextEntity}`).prop('disabled', false).html(optionsHtml);
                        } else {
                            // Last parent in the chain is selected, so fetch the main data
                            const lastParentId = Object.values(parentSelections).pop();
                            fetchChildData(currentEntity, lastParentId);
                        }
                    } else {
                        // No parent selected, so clear the data content
                        $('#dataContent').html('');
                    }
                }

                function renderParentChain() {
                    const config = entityConfig[currentEntity];
                    let parentEntity = config.parentEntity;
                    let parentChainHtml = '';
                    const selectors = [];

                    while (parentEntity) {
                        selectors.unshift(parentEntity);
                        const parentConfig = entityConfig[parentEntity];
                        parentEntity = parentConfig?.parentEntity;
                    }

                    selectors.forEach(pEntity => {
                        const parentList = parentDataCache[pEntity] || [];
                        let optionsHtml = `<option value="">-- Select ${prettifyColumnName(pEntity)} --</option>`;

                        parentList.forEach(item => {
                            let id = item.id;
                            let name = item.name || `ID:${id}`;
                            optionsHtml += `<option value="${id}">${escapeHtml(name)}</option>`;
                        });

                        parentChainHtml += `
                            <div class="form-group mb-3">
                                <label for="select-${pEntity}">${prettifyColumnName(pEntity)}</label>
                                <select id="select-${pEntity}" data-entity="${pEntity}" class="form-control parent-select">${optionsHtml}</select>
                            </div>
                        `;
                    });

                    $('#parentSelectorContainer').html(parentChainHtml);
                    $('#dataContent').html('');

                    $('.parent-select').each(function (index) {
                        $(this).on('change', function () {
                            handleParentChange(this, index, selectors);
                        });
                    });

                    $('.parent-select').slice(1).prop('disabled', true);
                }


                function loadData(entity) {
                    if (!entity) return;

                    currentEntity = entity;
                    const config = entityConfig[entity];
                    const parentEntity = config?.parentEntity;

                    $('#parentSelectorContainer').html('');
                    $('#dataContent').html('');
                    parentSelections = {};

                    if (parentEntity) {
                        const parentChain = [];
                        let tempParent = entity;
                        while (entityConfig[tempParent]?.parentEntity) {
                            tempParent = entityConfig[tempParent].parentEntity;
                            parentChain.unshift(tempParent);
                        }

                        const deferreds = parentChain.map(pEntity => fetchParentData(pEntity));

                        Swal.fire({
                            title: `Loading data...`,
                            allowOutsideClick: false,
                            didOpen: () => Swal.showLoading()
                        });

                        $.when(...deferreds).done(() => {
                            Swal.close();
                            renderParentChain();
                        }).fail(() => {
                            Swal.close();
                            Swal.fire('Error', 'Failed to load data.', 'error');
                        });
                    } else {
                        fetchChildData(entity);
                    }
                }

              $(document).ready(function() {
                    // Call the function directly with the value 'student'
                    loadData('student');
                });

                $(document).on('click', '#addBtn', function () {
                    openModal(`Add New ${currentEntity.charAt(0).toUpperCase() + currentEntity.slice(1)}`);
                });

                $(document).on('click', '.edit-btn', function () {
                    const rowData = $(this).data('row');
                    openModal(`Edit ${currentEntity.charAt(0).toUpperCase() + currentEntity.slice(1)}`, rowData);
                });

                $(document).on('click', '.delete-btn', function () {
                    const id = $(this).data('id');
                    Swal.fire({
                        title: 'Are you sure?',
                        text: "This action cannot be undone.",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, delete it!',
                        cancelButtonText: 'Cancel'
                    }).then(result => {
                        if (result.isConfirmed) {
                            Swal.fire({
                                title: 'Deleting...',
                                allowOutsideClick: false,
                                didOpen: () => Swal.showLoading()
                            });

                            $.ajax({
                                url: `${entityConfig[currentEntity].api}/${id}`,
                                method: 'DELETE',
                                success: () => {
                                    Swal.close();
                                    Swal.fire('Deleted!', 'Record has been deleted.', 'success');
                                    const lastParentId = Object.values(parentSelections).pop();
                                    fetchChildData(currentEntity, lastParentId);
                                },
                                error: () => {
                                    Swal.close();
                                    Swal.fire('Error', 'Failed to delete record.', 'error');
                                }
                            });
                        }
                    });
                });

                let filteredData = [];

                $(document).on('input', '#tableSearch', function () {
                    const query = $(this).val().toLowerCase();

                    filteredData = loadedData.filter(row => {
                        return currentColumns.some(col => {
                            if (col.toLowerCase().includes('id')) return false;
                            const val = row[col];
                            return val !== null && val !== undefined && val.toString().toLowerCase().includes(query);
                        });
                    });

                    currentPage = 1;
                    renderTable(filteredData);
                });

                $(document).on('click', '.page-btn', function () {
                    const page = parseInt($(this).data('page'));
                    if (!isNaN(page)) {
                        currentPage = page;
                        const dataToRender = $('#tableSearch').val() ? filteredData : loadedData;
                        renderTable(dataToRender);
                    }
                });

            });

        </script>
</body>

</html>