const express = require("express");
const academicController = require('../controllers/academicController');
const staffController = require('../controllers/staffContoller');
const AcademicController = new academicController();
const StaffController = new staffController();
const AuthMiddleware = require('../middlewares/verifyToken');
const authMiddleware = new AuthMiddleware();
const rbac = require('../middlewares/permissions');
const router = express.Router();

router.get('/class', AcademicController.getAllClasses.bind(AcademicController));
router.get('/class/:ClassId', AcademicController.getClassById.bind(AcademicController));
router.post('/class', AcademicController.createClass.bind(AcademicController));
router.put('/class/:ClassId', AcademicController.updateClass.bind(AcademicController));
router.delete('/class/:ClassId', AcademicController.deleteClass.bind(AcademicController));
router.get('/gender', AcademicController.getAllGenders.bind(AcademicController));
router.get('/gender/:GenderId', AcademicController.getGenderById.bind(AcademicController));
router.post('/gender', AcademicController.createGender.bind(AcademicController));
router.put('/gender/:GenderId', AcademicController.updateGender.bind(AcademicController));
router.delete('/gender/:GenderId', AcademicController.deleteGender.bind(AcademicController));
router.get('/stream', AcademicController.getAllStreams.bind(AcademicController));
router.get('/stream/:StreamId', AcademicController.getStreamById.bind(AcademicController));
router.post('/stream', AcademicController.createStream.bind(AcademicController));
router.put('/stream/:StreamId', AcademicController.updateStream.bind(AcademicController));
router.delete('/stream/:StreamId', AcademicController.deleteStream.bind(AcademicController));
router.get('/subject', AcademicController.getAllSubjects.bind(AcademicController));
router.get('/subject/:SubjectId', AcademicController.getSubjectById.bind(AcademicController));
router.post('/subject', AcademicController.createSubject.bind(AcademicController));
router.put('/subject/:SubjectId', AcademicController.updateSubject.bind(AcademicController));
router.delete('/subject/:SubjectId', AcademicController.deleteSubject.bind(AcademicController));
router.get('/term', AcademicController.getAllTerms.bind(AcademicController));
router.get('/term/:TermId', AcademicController.getTermById.bind(AcademicController));
router.post('/term', AcademicController.createTerm.bind(AcademicController));
router.put('/term/:TermId', AcademicController.updateTerm.bind(AcademicController));
router.delete('/term/:TermId', AcademicController.deleteTerm.bind(AcademicController));
router.get('/year', AcademicController.getAllYears.bind(AcademicController));
router.get('/year/:YearId', AcademicController.getYearById.bind(AcademicController));
router.post('/year', AcademicController.createYear.bind(AcademicController));
router.put('/year/:YearId', AcademicController.updateYear.bind(AcademicController));
router.delete('/year/:YearId', AcademicController.deleteYear.bind(AcademicController));
router.get('/entity', AcademicController.getAllEntities.bind(AcademicController));
router.get('/entity/:EntityId', AcademicController.getEntityById.bind(AcademicController));
router.post('/entity', AcademicController.createEntity.bind(AcademicController));
router.put('/entity/:EntityId', AcademicController.updateEntity.bind(AcademicController));
router.delete('/entity/:EntityId', AcademicController.deleteEntity.bind(AcademicController));
router.get('/staff', StaffController.getAllStaffs.bind(StaffController));
router.get('/staffs', StaffController.getAllStaff.bind(StaffController));
router.get('/staff/:StaffId', StaffController.getStaffById.bind(StaffController));
router.post('/staff', StaffController.createStaff.bind(StaffController));
router.post('/login', StaffController.login.bind(StaffController));
router.put('/staff/:StaffId', StaffController.updateStaff.bind(StaffController));
router.delete('/staff/:StaffId', StaffController.deleteStaff.bind(StaffController));
router.get('/disability', StaffController.getAllDisabilities.bind(StaffController));
router.get('/disability/:DisabilityId', StaffController.getDisabilityById.bind(StaffController));
router.post('/disability', StaffController.createDisability.bind(StaffController));
router.put('/disability/:DisabilityId', StaffController.updateDisability.bind(StaffController));
router.delete('/disability/:DisabilityId', StaffController.deleteDisability.bind(StaffController));
router.get('/role', StaffController.getAllRoles.bind(StaffController));
router.get('/role/:RoleId', StaffController.getRoleById.bind(StaffController));
router.post('/role', StaffController.createRole.bind(StaffController));
router.put('/role/:RoleId', StaffController.updateRole.bind(StaffController));
router.delete('/role/:RoleId', StaffController.deleteRole.bind(StaffController));
router.get('/permission', StaffController.getAllPermissions.bind(StaffController));
router.get('/permission/:PermissionId', StaffController.getPermissionById.bind(StaffController));
router.post('/permission', StaffController.createPermission.bind(StaffController));
router.put('/permission/:PermissionId', StaffController.updatePermission.bind(StaffController));
router.delete('/permission/:PermissionId', StaffController.deletePermission.bind(StaffController));
router.get('/type', StaffController.getAllTypes.bind(StaffController));
router.get('/type/:TypeId', StaffController.getTypeById.bind(StaffController));
router.post('/type', StaffController.createType.bind(StaffController));
router.put('/type/:TypeId', StaffController.updateType.bind(StaffController));
router.delete('/type/:TypeId', StaffController.deleteType.bind(StaffController));
router.get('/designation', StaffController.getAllDesignations.bind(StaffController));
router.get('/designation/:DesignationId', StaffController.getDesignationById.bind(StaffController));
router.post('/designation', StaffController.createDesignation.bind(StaffController));
router.put('/designation/:DesignationId', StaffController.updateDesignation.bind(StaffController));
router.delete('/designation/:DesignationId', StaffController.deleteDesignation.bind(StaffController));
router.post('/staff/:id/designation', StaffController.assignDesignations.bind(StaffController));
router.post('/role/:id/permission', StaffController.assignPermissions.bind(StaffController));
router.get('/role/:id/permission', StaffController.getPermissionByRole.bind(StaffController));
router.post('/staff/:id/role', StaffController.assignRoles.bind(StaffController));
router.get('/staff/:id/role', StaffController.getRolesByStaff.bind(StaffController));
router.post('/logout', StaffController.logout.bind(StaffController)); 
router.get('/attendance', StaffController.getAllAttendances.bind(StaffController));
router.get('/attendance/:AttendanceId', StaffController.getAttendanceById.bind(StaffController));
router.post('/attendance', StaffController.createAttendances.bind(StaffController));
router.delete('/attendance/:AttendanceId', StaffController.deleteAttendance.bind(StaffController));
router.get('/view/:date', StaffController.getAttendanceByDate.bind(StaffController));
router.get('/hello', StaffController.getAttendanceSummary.bind(StaffController));

router.get('/Home', authMiddleware.verifyToken, (req, res) => {

    const email = req.session.staffEmail || '';
    const lastname = req.session.lastname || '';
    return res.render('index', {email, lastname});
});

router.get('/create', authMiddleware.verifyToken, (req, res) => {
      const email = req.session.staffEmail || '';
    const lastname = req.session.lastname || '';
    return res.render('table', {email, lastname});
});

module.exports = router;